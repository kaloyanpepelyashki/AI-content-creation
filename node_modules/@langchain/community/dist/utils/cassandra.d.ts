import { Client, DseClientOptions } from "cassandra-driver";
export interface AstraServiceProviderArgs {
    datacenterID?: string;
    endpoint?: string | URL;
    token: string;
    regionName?: string;
}
export interface CassandraServiceProviderArgs {
    astra?: AstraServiceProviderArgs;
}
export interface CassandraClientArgs extends DseClientOptions {
    serviceProviderArgs?: CassandraServiceProviderArgs;
}
/**
 * A factory class for creating Cassandra clients.
 */
export declare class CassandraClientFactory {
    /**
     * Get a Cassandra client with the provided arguments.
     * @param args The arguments for creating the Cassandra client.
     * @returns A Client object from the cassandra-driver.
     */
    static getClient(args: CassandraClientArgs): Promise<Client>;
    /**
     * Process the arguments for creating a Cassandra client.
     * @param args The arguments for creating the Cassandra client.
     * @returns The processed arguments.
     * @throws Error if the configuration is unsupported (e.g. unknown service provider).
     */
    private static processArgs;
    /**
     * Process the arguments for creating a Cassandra client to Astra.
     * @param args The arguments for creating the Cassandra client.
     * @returns The processed arguments for connecting to Astra.
     * @throws Error if the Astra configuration is not provided.
     */
    private static processAstraArgs;
    /**
     * Get the default bundle location for Astra.
     * @param astraArgs The Astra service provider arguments.
     * @returns The default bundle file path.
     */
    private static getAstraDefaultBundleLocation;
    /**
     * Set the Astra bundle for the Cassandra client.
     * @param astraArgs The Astra service provider arguments.
     * @param scbPath The path to the secure connect bundle.
     * @returns Promise that resolves when the bundle is set.
     * @throws Error if the bundle URLs cannot be retrieved or the file cannot be downloaded.
     */
    private static setAstraBundle;
    /**
     * Downloads the Astra secure connect bundle for the given Astra service provider arguments
     * and saves it to the specified file path.
     *
     * @param astraArgs - The Astra service provider arguments.
     * @param scbPath - The file path to save the secure connect bundle.
     * @returns A promise that resolves when the secure connect bundle is downloaded and saved.
     * @throws An error if there is an HTTP error or if the secure bundle URLs cannot be retrieved.
     */
    private static downloadAstraSecureConnectBundle;
}
